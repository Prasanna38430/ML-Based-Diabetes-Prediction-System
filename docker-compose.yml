version: '3.8'

x-airflow-common:
  &airflow-common
  build:
    context: ./airflow
    dockerfile: Dockerfile

  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.5}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-db/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__BASE_URL: http://airflow-webserver:8080
  
  volumes:
  - ${AIRFLOW_PROJ_DIR:-./airflow}/dags:/opt/airflow/dags
  - ${AIRFLOW_PROJ_DIR:-./airflow}/logs:/opt/airflow/logs
  - ${AIRFLOW_PROJ_DIR:-./airflow}/config:/opt/airflow/config
  - ${AIRFLOW_PROJ_DIR:-./airflow}/plugins:/opt/airflow/plugins
  - ${AIRFLOW_PROJ_DIR:-./airflow}/data:/opt/airflow/data
  - ${AIRFLOW_PROJ_DIR:-./airflow}/great_expectations:/opt/airflow/great_expectations
 
  

  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    redis:
      condition: service_healthy
    airflow-db:
      condition: service_healthy

services:
  # PostgreSQL for FastAPI & Streamlit
  db:
    image: postgres:13
    container_name: fastapi_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: piggy
      POSTGRES_DB: diabetes_predictions
    ports:
      - "5432:5432"
    volumes:
      - fastapi_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d diabetes_predictions"]
      interval: 5s
      retries: 5
      timeout: 5s
    networks:
      - app-network
      - shared-network

  # PostgreSQL for Airflow
  airflow-db:
    image: postgres:13
    container_name: airflow_db
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"  # Exposed on 5433 to avoid conflicts
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      retries: 5
      timeout: 5s
    networks:
      - airflow-network
      - shared-network

  # Redis (For Airflow Celery Executor)

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: project
    ports:
      - "5050:80"
    networks:
      - shared-network
    depends_on:
      - db
      - airflow-db
  redis:
    image: redis:7.2-bookworm
    container_name: airflow_redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - airflow-network
      - shared-network

  # FastAPI Service
  fastapi:
    build:
      context: ./FastApi
    container_name: fastapi_app
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./FastApi:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
      - shared-network

  # Streamlit WebApp
  webapp:
    build:
      context: ./Webapp
    ports:
      - "8501:8501"
    environment:
      - PREDICTION_API_URL=http://fastapi:8000/predict
      - PAST_PREDICTIONS_API_URL=http://fastapi:8000/past-predictions
    depends_on:
      - fastapi
    
    networks:
      - app-network
      - shared-network

  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      - airflow-init
    networks:
      - airflow-network
      - shared-network

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: scheduler
    restart: always
    depends_on:
      - airflow-init
    networks:
      - airflow-network
      - shared-network

  # Airflow Worker
  airflow-worker:
    <<: *airflow-common
    container_name: airflow_worker
    command: celery worker
    restart: always
    depends_on:
      - airflow-init
    networks:
      - airflow-network
      - shared-network

  # Airflow Triggerer
  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow_triggerer
    command: triggerer
    restart: always
    depends_on:
      - airflow-init
    networks:
      - airflow-network
      - shared-network

  # Airflow Initialization
  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-./airflow}:/sources
    networks:
      - airflow-network
      - shared-network

  # Flower (Airflow Celery UI)
  flower:
    <<: *airflow-common
    container_name: airflow_flower
    command: celery flower
    ports:
      - "5555:5555"
    restart: always
    depends_on:
      - airflow-init
    networks:
      - airflow-network
      - shared-network

volumes:
  fastapi_postgres_data:
  airflow_postgres_data:

networks:
  app-network:
    driver: bridge
  airflow-network:
    driver: bridge
  shared-network:
    driver: bridge
